var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  FrbcActuatorDescription: () => FrbcActuatorDescription,
  FrbcActuatorStatus: () => FrbcActuatorStatus,
  FrbcFillLevelTargetProfile: () => FrbcFillLevelTargetProfile,
  FrbcInstruction: () => FrbcInstruction,
  FrbcLeakageBehaviour: () => FrbcLeakageBehaviour,
  FrbcOperationMode: () => FrbcOperationMode,
  FrbcStorageDescription: () => FrbcStorageDescription,
  FrbcStorageStatus: () => FrbcStorageStatus,
  FrbcTimerStatus: () => FrbcTimerStatus,
  FrbcUsageForecast: () => FrbcUsageForecast,
  Handshake: () => Handshake,
  HandshakeResponse: () => HandshakeResponse,
  InstructionStatusUpdate: () => InstructionStatusUpdate,
  NumberRange: () => NumberRange,
  PowerForecast: () => PowerForecast,
  PowerForecastValue: () => PowerForecastValue,
  PowerMeasurement: () => PowerMeasurement,
  PowerRange: () => PowerRange,
  ReceptionStatus: () => ReceptionStatus,
  ResourceManagerDetails: () => ResourceManagerDetails,
  RevokeObject: () => RevokeObject,
  SelectControlType: () => SelectControlType,
  SessionRequest: () => SessionRequest,
  Timer: () => Timer,
  Transition: () => Transition,
  WebSocketClientController: () => WebSocketClientController,
  WebSocketServerController: () => WebSocketServerController,
  init: () => init,
  parseMessage: () => parseMessage
});
module.exports = __toCommonJS(src_exports);

// src/app.ts
function init() {
  console.log("S2 TYPESCRIPT MODULE INITIALIZED");
}

// src/app/services/WebSocketServerController.ts
var import_ws = require("ws");
var WebSocketServerController = class {
  constructor(port = 8e3, onMessage) {
    this.wss = new import_ws.WebSocketServer({ port });
    this.onMessage = onMessage;
    this.wss.on("error", console.error);
    this.wss.on("connection", (ws) => {
      ws.on("message", (message) => {
        this.onMessage(message);
      });
    });
    this.wss.on("message", (message) => {
      this.onMessage(message);
    });
  }
  AddMessageOnConection(message) {
    this.wss.on("connection", (ws) => {
      console.log(message);
      this.BroadcastMessage(message);
    });
  }
  BroadcastMessage(message) {
    let i = 0;
    this.wss.clients.forEach((client) => {
      if (client.readyState === 1) {
        client.send(message);
        i++;
        console.log(`Sent message to ${i} clients`);
      }
    });
  }
};

// src/app/services/WebSocketClientController.ts
var import_ws2 = require("ws");
var WebSocketClientController = class {
  constructor(url, onMessage) {
    this.ws = new import_ws2.WebSocket(url);
    this.onMessage = onMessage;
    this.ws.on("error", console.error);
    this.ws.on("open", () => {
      console.log("Connected");
    });
    this.ws.on("message", (message) => {
      this.onMessage(message);
    });
    this.ws.on("close", () => {
      console.log("Disconnected");
    });
  }
  SendMessage(message) {
    console.log(`Sending message => ${message}`);
    this.ws.send(message);
  }
};

// src/app/common/PowerRange.ts
var PowerRange = class {
  constructor({ start_of_range, end_of_range, commodity_quantity }) {
    if (start_of_range > end_of_range) {
      throw new Error("start_of_range must be less than or equal to end_of_range");
    }
    this.start_of_range = start_of_range;
    this.end_of_range = end_of_range;
    this.commodity_quantity = commodity_quantity;
  }
};

// src/app/services/Uuid.ts
var import_uuid = require("uuid");
var Uuid = class {
  static generate(id) {
    if (id) {
      return id;
    }
    return (0, import_uuid.v4)();
  }
};

// src/app/common/Handshake.ts
var Handshake = class {
  constructor({ message_id, role, supported_protocol_versions }) {
    this.message_type = "Handshake";
    this.message_id = Uuid.generate(message_id);
    this.role = role;
    this.supported_protocol_versions = supported_protocol_versions;
  }
};

// src/app/common/HandshakeResponse.ts
var HandshakeResponse = class {
  constructor({ message_id, selected_protocol_version }) {
    this.message_type = "HandshakeResponse";
    this.message_id = Uuid.generate(message_id);
    this.selected_protocol_version = selected_protocol_version;
  }
};

// src/app/common/InstructionStatusUpdate.ts
var InstructionStatusUpdate = class {
  constructor({ message_id, instruction_id, status_type, timestamp }) {
    validateTimestamp(timestamp);
    this.message_type = "InstructionStatusUpdate";
    this.message_id = Uuid.generate(message_id);
    this.instruction_id = instruction_id;
    this.status_type = status_type;
    this.timestamp = timestamp;
  }
};

// src/app/common/NumberRange.ts
var NumberRange = class {
  constructor({ start_of_range, end_of_range }) {
    this.Validate({ start_of_range, end_of_range });
    this.start_of_range = start_of_range;
    this.end_of_range = end_of_range;
  }
  Validate({ start_of_range, end_of_range }) {
    if (start_of_range > end_of_range) {
      throw new Error("start_of_range must be less than or equal to end_of_range");
    }
  }
};

// src/app/common/PowerForecast.ts
var PowerForecast = class {
  constructor({ message_id, start_time, elements }) {
    validateTimestamp(start_time);
    this.message_type = "PowerForecast";
    this.message_id = Uuid.generate(message_id);
    this.start_time = start_time;
    this.elements = elements;
  }
};

// src/app/common/PowerForecastValue.ts
var PowerForecastValue = class {
  constructor({ value_upper_limit, value_upper_95PPR, value_upper_68PPR, value_lower_68PPR, value_lower_95PPR, value_lower_limit, value_expected, commodity_quantity }) {
    this.value_upper_limit = value_upper_limit;
    this.value_upper_95PPR = value_upper_95PPR;
    this.value_upper_68PPR = value_upper_68PPR;
    this.value_expected = value_expected;
    this.value_lower_68PPR = value_lower_68PPR;
    this.value_lower_95PPR = value_lower_95PPR;
    this.value_lower_limit = value_lower_limit;
    this.commodity_quantity = commodity_quantity;
  }
};

// src/app/common/PowerMeasurement.ts
var PowerMeasurement = class {
  constructor({ message_id, measurement_timestamp, values }) {
    validateTimestamp(measurement_timestamp);
    this.message_type = "PowerMeasurement";
    this.message_id = Uuid.generate(message_id);
    ;
    this.measurement_timestamp = measurement_timestamp;
    this.values = values;
  }
};

// src/app/common/ReceptionStatus.ts
var ReceptionStatus = class {
  constructor({ subject_message_id, status, diagnostic_label }) {
    this.message_type = "ReceptionStatus";
    this.subject_message_id = subject_message_id;
    this.status = status;
    this.diagnostic_label = diagnostic_label;
  }
};

// src/app/common/ResourceManagerDetails.ts
var ResourceManagerDetails = class {
  constructor({ message_id, resource_id, name, roles, manufacturer, model, serial_number, firmware_version, instruction_processing_delay, available_control_types, currency, provides_forecast, provides_power_measurement_types }) {
    validateDuration(instruction_processing_delay);
    this.message_type = "ResourceManagerDetails";
    this.message_id = Uuid.generate(message_id);
    this.resource_id = resource_id;
    this.name = name;
    this.roles = roles;
    this.manufacturer = manufacturer;
    this.model = model;
    this.serial_number = serial_number;
    this.firmware_version = firmware_version;
    this.instruction_processing_delay = instruction_processing_delay;
    this.available_control_types = available_control_types;
    this.currency = currency;
    this.provides_forecast = provides_forecast;
    this.provides_power_measurement_types = provides_power_measurement_types;
  }
};

// src/app/common/RevokeObject.ts
var RevokeObject = class {
  constructor({ message_id, object_type, object_id }) {
    this.message_type = "RevokeObject";
    this.message_id = Uuid.generate(message_id);
    this.object_type = object_type;
    this.object_id = object_id;
  }
};

// src/app/common/SelectControlType.ts
var SelectControlType = class {
  constructor({ message_id, control_type }) {
    this.message_type = "SelectControlType";
    this.message_id = Uuid.generate(message_id);
    this.control_type = control_type;
  }
};

// src/app/common/SessionRequest.ts
var SessionRequest = class {
  constructor({ message_id, request, diagnostic_label }) {
    this.message_type = "SessionRequest";
    this.message_id = Uuid.generate(message_id);
    this.request = request;
    this.diagnostic_label = diagnostic_label;
  }
};

// src/app/common/Duration.ts
var validateDuration = (value) => {
  if (!(Number.isInteger(value) && value >= 0))
    throw new Error("duration must be a positive integer");
};

// src/app/common/Timer.ts
var Timer = class {
  constructor({ id, duration, diagnostic_label }) {
    validateDuration(duration);
    this.id = Uuid.generate(id);
    this.duration = duration;
    this.diagnostic_label = diagnostic_label;
  }
};

// src/app/common/Transition.ts
var Transition = class {
  constructor({ id, from, to, start_timers, blocking_timers, transition_costs, transition_duration, abnormal_condition_only }) {
    validateDuration(transition_duration);
    if (start_timers.length > 100) {
      throw new Error("Transition: start_timers must be between 0 and 100 elements");
    }
    if (blocking_timers.length > 100) {
      throw new Error("Transition: blocking_timers must be between 0 and 100 elements");
    }
    this.id = Uuid.generate(id);
    this.from = from;
    this.to = to;
    this.start_timers = start_timers;
    this.blocking_timers = blocking_timers;
    this.transition_costs = transition_costs;
    this.transition_duration = transition_duration;
    this.abnormal_condition_only = abnormal_condition_only;
  }
};

// src/app/common/Timestamp.ts
var validateTimestamp = (timestamp) => {
  const date = Date.parse(timestamp);
  if (isNaN(date)) {
    throw new Error(`Invalid TimeStamp: ${timestamp}`);
  }
};

// src/app/FRBC/FrbcActuatorDescription.ts
var FrbcActuatorDescription = class {
  constructor({ id, supported_commodities, operation_modes, transitions, timers, diagnostic_label }) {
    if (operation_modes.length > 100) {
      throw new Error("FRBC_ActuatorDescription: operation_modes must be between 1 and 100 elements");
    }
    if (transitions.length > 1e3) {
      throw new Error("FRBC_ActuatorDescription: transitions must be less than 1000 elements");
    }
    if (timers.length > 100) {
      throw new Error("FRBC_ActuatorDescription: timers must be less than and 100 elements");
    }
    this.id = id;
    this.supported_commodities = supported_commodities;
    this.operation_modes = operation_modes;
    this.transitions = transitions;
    this.timers = timers;
    this.diagnostic_label = diagnostic_label;
  }
};

// src/app/FRBC/FrbcOperationModeFactor.ts
var validateOperationModeFactor = (operationModeFactor) => {
  if (operationModeFactor < 0 || operationModeFactor > 1) {
    throw new Error("The Operation Mode Factor must be between 0 and 1");
  }
};

// src/app/FRBC/FrbcActuatorStatus.ts
var FrbcActuatorStatus = class {
  constructor({ message_id, actuator_id, active_operation_mode_id, operation_mode_factor, previous_operation_mode_id, transition_timestamp }) {
    validateOperationModeFactor(operation_mode_factor);
    validateTimestamp(transition_timestamp);
    this.message_type = "FRBC.ActuatorStatus";
    this.message_id = Uuid.generate(message_id);
    this.actuator_id = actuator_id;
    this.active_operation_mode_id = active_operation_mode_id;
    this.operation_mode_factor = operation_mode_factor;
    this.previous_operation_mode_id = previous_operation_mode_id;
    this.transition_timestamp = transition_timestamp;
  }
};

// src/app/FRBC/FrbcFillLevelTargetProfile.ts
var FrbcFillLevelTargetProfile = class {
  constructor({ message_id, start_time, elements }) {
    if (elements.length > 288) {
      throw new Error("The size of the FRBC_FillLevelTargetProfileElements array must be between 1 and 288");
    }
    validateTimestamp(start_time);
    this.message_type = "FRBC.FillLevelTargetProfile";
    this.message_id = Uuid.generate(message_id);
    this.start_time = start_time;
    const elementsArray = elements.map((element) => new FrbcFillLevelTargetProfileElement(element));
    this.elements = elementsArray;
  }
};

// src/app/FRBC/FrbcFillLevelTargetProfileElement.ts
var FrbcFillLevelTargetProfileElement = class {
  constructor({ duration, fill_level_range }) {
    validateDuration(duration);
    const range = new NumberRange({
      start_of_range: fill_level_range.start_of_range,
      end_of_range: fill_level_range.end_of_range
    });
    this.duration = duration;
    this.fill_level_range = range;
  }
};

// src/app/FRBC/FrbcInstruction.ts
var FrbcInstruction = class {
  constructor({ message_id, id, actuator_id, operation_mode, operation_mode_factor, execution_time, abnormal_condition }) {
    validateOperationModeFactor(operation_mode_factor);
    validateTimestamp(execution_time);
    this.message_type = "FRBC.Instruction";
    this.message_id = Uuid.generate(message_id);
    this.id = id;
    this.actuator_id = actuator_id;
    this.operation_mode = operation_mode;
    this.operation_mode_factor = operation_mode_factor;
    this.execution_time = execution_time;
    this.abnormal_condition = abnormal_condition;
  }
};

// src/app/FRBC/FrbcLeakageBehaviour.ts
var FrbcLeakageBehaviour = class {
  constructor({ message_id, valid_from, elements }) {
    if (elements.length > 288) {
      throw new Error("The size of the FRBC_LeakageBehaviourElements array must be between 1 and 288");
    }
    validateTimestamp(valid_from);
    this.message_type = "FRBC.LeakageBehaviour";
    this.message_id = Uuid.generate(message_id);
    this.valid_from = valid_from;
    const elementsArray = elements.map((element) => new FrbcLeakageBehaviourElement(element));
    this.elements = elementsArray;
  }
};

// src/app/FRBC/FrbcLeakageBehaviourElement.ts
var FrbcLeakageBehaviourElement = class {
  constructor({ fill_level_range, leakage_rate }) {
    const range = new NumberRange({
      start_of_range: fill_level_range.start_of_range,
      end_of_range: fill_level_range.end_of_range
    });
    this.fill_level_range = range;
    this.leakage_rate = leakage_rate;
  }
};

// src/app/FRBC/FrbcOperationMode.ts
var FrbcOperationMode = class {
  constructor({ id, elements, abnormal_condition_only }) {
    this.id = Uuid.generate(id);
    this.elements = elements;
    this.abnormal_condition_only = abnormal_condition_only;
  }
};

// src/app/FRBC/FrbcStorageDescription.ts
var FrbcStorageDescription = class {
  constructor({ diagnostic_label, fill_level_label, provides_leakage_behaviour, provides_fill_level_target_profile, provides_usage_forecast, fill_level_range }) {
    const range = new NumberRange({
      start_of_range: fill_level_range.start_of_range,
      end_of_range: fill_level_range.end_of_range
    });
    this.diagnostic_label = diagnostic_label;
    this.fill_level_label = fill_level_label;
    this.provides_leakage_behaviour = provides_leakage_behaviour;
    this.provides_fill_level_target_profile = provides_fill_level_target_profile;
    this.provides_usage_forecast = provides_usage_forecast;
    this.fill_level_range = range;
  }
};

// src/app/FRBC/FrbcStorageStatus.ts
var FrbcStorageStatus = class {
  constructor({ message_id, present_fill_level }) {
    this.message_type = "FRBC.StorageStatus";
    this.message_id = Uuid.generate(message_id);
    this.present_fill_level = present_fill_level;
  }
};

// src/app/FRBC/FrbcTimerStatus.ts
var FrbcTimerStatus = class {
  constructor({ message_id, timer_id, actuator_id, finished_at }) {
    validateTimestamp(finished_at);
    this.message_type = "FRBC.TimerStatus";
    this.message_id = Uuid.generate(message_id);
    this.timer_id = timer_id;
    this.actuator_id = actuator_id;
    this.finished_at = finished_at;
  }
};

// src/app/FRBC/FrbcUsageForecast.ts
var FrbcUsageForecast = class {
  constructor({ message_id, start_time, elements }) {
    if (elements.length > 288) {
      throw new Error("The size of the FRBC_UsageForecastElements array must be between 1 and 288");
    }
    validateTimestamp(start_time);
    this.message_type = "FRBC.UsageForecast";
    this.message_id = Uuid.generate(message_id);
    this.start_time = start_time;
    this.elements = elements;
  }
};

// src/app/services/MessageParser.ts
var messageTypeToClass = {
  "Handshake": Handshake,
  "HandshakeResponse": HandshakeResponse,
  "InstructionStatusUpdate": InstructionStatusUpdate,
  "PowerForecast": PowerForecast,
  "PowerMeasurement": PowerMeasurement,
  "ReceptionStatus": ReceptionStatus,
  "ResourceManagerDetails": ResourceManagerDetails,
  "RevokeObject": RevokeObject,
  "SelectControlType": SelectControlType,
  "SessionRequest": SessionRequest,
  "Timer": Timer,
  "Transition": Transition,
  "FRBC.StorageStatus": FrbcStorageStatus,
  "FRBC.ActuatorStatus": FrbcActuatorStatus,
  "FRBC.FillLevelTargetProfile": FrbcFillLevelTargetProfile,
  "FRBC.Instruction": FrbcInstruction,
  "FRBC.LeakageBehaviour": FrbcLeakageBehaviour,
  "FRBC.OperationMode": FrbcOperationMode,
  "FRBC.StorageDescription": FrbcStorageDescription,
  "FRBC.TimerStatus": FrbcTimerStatus,
  "FRBC.UsageForecast": FrbcUsageForecast
};
function parseMessage(json) {
  const jsonObject = JSON.parse(json);
  const messageType = jsonObject.message_type;
  const messageClass = messageTypeToClass[messageType];
  if (messageClass) {
    return new messageClass(jsonObject);
  }
  console.log("Unknown message type");
  return null;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FrbcActuatorDescription,
  FrbcActuatorStatus,
  FrbcFillLevelTargetProfile,
  FrbcInstruction,
  FrbcLeakageBehaviour,
  FrbcOperationMode,
  FrbcStorageDescription,
  FrbcStorageStatus,
  FrbcTimerStatus,
  FrbcUsageForecast,
  Handshake,
  HandshakeResponse,
  InstructionStatusUpdate,
  NumberRange,
  PowerForecast,
  PowerForecastValue,
  PowerMeasurement,
  PowerRange,
  ReceptionStatus,
  ResourceManagerDetails,
  RevokeObject,
  SelectControlType,
  SessionRequest,
  Timer,
  Transition,
  WebSocketClientController,
  WebSocketServerController,
  init,
  parseMessage
});
